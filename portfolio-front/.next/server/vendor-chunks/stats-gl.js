"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stats-gl";
exports.ids = ["vendor-chunks/stats-gl"];
exports.modules = {

/***/ "(ssr)/./node_modules/stats-gl/dist/main.cjs":
/*!*********************************************!*\
  !*** ./node_modules/stats-gl/dist/main.cjs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst panel = __webpack_require__(/*! ./panel.cjs */ \"(ssr)/./node_modules/stats-gl/dist/panel.cjs\");\nconst _Stats = class _Stats {\n  constructor({ logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {}) {\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement(\"div\");\n    this.container.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.container.style.cssText += \"cursor:pointer\";\n    }\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query = null;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.container.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        this.showPanel(++this.mode % this.container.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", () => {\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  resizePanel(panel2, offset) {\n    panel2.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel2.canvas.style.display = \"none\";\n    } else {\n      panel2.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel2.canvas.style.top = \"0px\";\n        panel2.canvas.style.left = offset * panel2.WIDTH / panel2.PR + \"px\";\n      } else {\n        panel2.canvas.style.left = \"0px\";\n        panel2.canvas.style.top = offset * panel2.HEIGHT / panel2.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel2, offset) {\n    if (panel2.canvas) {\n      this.container.appendChild(panel2.canvas);\n      this.resizePanel(panel2, offset);\n    }\n    return panel2;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.container.children.length; i++) {\n      const child = this.container.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  init(canvas) {\n    this.canvasGpu = canvas;\n    if (!this.canvasGpu)\n      return;\n    this.gl = this.canvasGpu.getContext(\"webgl2\");\n    this.ext = this.gl ? this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\") : null;\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new _Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    }\n  }\n  begin() {\n    this.beginProfiling(\"cpu-started\");\n    if (!this.gl || !this.ext)\n      return;\n    if (this.query) {\n      const available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n      this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n      if (available && !this.disjoint) {\n        this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n        const ms = this.ns * 1e-6;\n        if (available || this.disjoint) {\n          this.gl.deleteQuery(this.query);\n          this.query = null;\n        }\n        if (available) {\n          this.addToAverage(ms, this.averageGpu);\n        }\n      }\n    }\n    if (!this.query) {\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n      if (this.query) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n      }\n    }\n  }\n  end() {\n    this.beginTime = this.endInternal();\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\", this.averageCpu);\n    if (!this.gl || !this.ext)\n      return;\n    if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n    }\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n      this.prevCpuTime = time;\n    }\n    if (time >= this.prevTime + 1e3) {\n      const fps = this.frames * 1e3 / (time - this.prevTime);\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName, averageArray) {\n    if (window.performance && endMarker) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.addToAverage(cpuMeasure.duration, averageArray);\n    }\n  }\n  updatePanel(panel2, averageArray) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel2) {\n        panel2.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n    }\n  }\n};\n_Stats.Panel = panel;\nlet Stats = _Stats;\nmodule.exports = Stats;\n//# sourceMappingURL=main.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/stats-gl/dist/main.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/stats-gl/dist/panel.cjs":
/*!**********************************************!*\
  !*** ./node_modules/stats-gl/dist/panel.cjs ***!
  \**********************************************/
/***/ ((module) => {

eval("\nclass Panel {\n  constructor(name, fg, bg) {\n    this.name = name;\n    this.fg = fg;\n    this.bg = bg;\n    this.PR = Math.round(window.devicePixelRatio || 1);\n    this.WIDTH = 90 * this.PR;\n    this.HEIGHT = 48 * this.PR;\n    this.TEXT_X = 3 * this.PR;\n    this.TEXT_Y = 2 * this.PR;\n    this.GRAPH_X = 3 * this.PR;\n    this.GRAPH_Y = 15 * this.PR;\n    this.GRAPH_WIDTH = 84 * this.PR;\n    this.GRAPH_HEIGHT = 30 * this.PR;\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = 90 * this.PR;\n    this.canvas.height = 48 * this.PR;\n    this.canvas.style.width = \"90px\";\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.height = \"48px\";\n    this.canvas.style.cssText = \"width:90px;height:48px\";\n    this.context = this.canvas.getContext(\"2d\");\n    if (this.context) {\n      this.context.font = \"bold \" + 9 * this.PR + \"px Helvetica,Arial,sans-serif\";\n      this.context.textBaseline = \"top\";\n      this.context.fillStyle = this.bg;\n      this.context.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n      this.context.fillStyle = this.fg;\n      this.context.fillText(this.name, this.TEXT_X, this.TEXT_Y);\n      this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n      this.context.fillStyle = this.bg;\n      this.context.globalAlpha = 0.9;\n      this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n    }\n  }\n  update(value, valueGraph, maxValue, maxGraph, decimals = 0) {\n    let min = Infinity, max = 0;\n    if (!this.context)\n      return;\n    min = Math.min(min, value);\n    max = Math.max(maxValue, value);\n    maxGraph = Math.max(maxGraph, valueGraph);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 1;\n    this.context.fillRect(0, 0, this.WIDTH, this.GRAPH_Y);\n    this.context.fillStyle = this.fg;\n    this.context.fillText(value.toFixed(decimals) + \" \" + this.name + \" (\" + min.toFixed(decimals) + \"-\" + parseFloat(max.toFixed(decimals)) + \")\", this.TEXT_X, this.TEXT_Y);\n    this.context.drawImage(this.canvas, this.GRAPH_X + this.PR, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT, this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT);\n    this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, this.GRAPH_HEIGHT);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 0.9;\n    this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, (1 - valueGraph / maxGraph) * this.GRAPH_HEIGHT);\n  }\n}\n;\nmodule.exports = Panel;\n//# sourceMappingURL=panel.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHMtZ2wvZGlzdC9wYW5lbC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1mcm9udC8uL25vZGVfbW9kdWxlcy9zdGF0cy1nbC9kaXN0L3BhbmVsLmNqcz9lOWE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgUGFuZWwge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBmZywgYmcpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZmcgPSBmZztcbiAgICB0aGlzLmJnID0gYmc7XG4gICAgdGhpcy5QUiA9IE1hdGgucm91bmQod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSk7XG4gICAgdGhpcy5XSURUSCA9IDkwICogdGhpcy5QUjtcbiAgICB0aGlzLkhFSUdIVCA9IDQ4ICogdGhpcy5QUjtcbiAgICB0aGlzLlRFWFRfWCA9IDMgKiB0aGlzLlBSO1xuICAgIHRoaXMuVEVYVF9ZID0gMiAqIHRoaXMuUFI7XG4gICAgdGhpcy5HUkFQSF9YID0gMyAqIHRoaXMuUFI7XG4gICAgdGhpcy5HUkFQSF9ZID0gMTUgKiB0aGlzLlBSO1xuICAgIHRoaXMuR1JBUEhfV0lEVEggPSA4NCAqIHRoaXMuUFI7XG4gICAgdGhpcy5HUkFQSF9IRUlHSFQgPSAzMCAqIHRoaXMuUFI7XG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gOTAgKiB0aGlzLlBSO1xuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IDQ4ICogdGhpcy5QUjtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS53aWR0aCA9IFwiOTBweFwiO1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLmhlaWdodCA9IFwiNDhweFwiO1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLmNzc1RleHQgPSBcIndpZHRoOjkwcHg7aGVpZ2h0OjQ4cHhcIjtcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgaWYgKHRoaXMuY29udGV4dCkge1xuICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPSBcImJvbGQgXCIgKyA5ICogdGhpcy5QUiArIFwicHggSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWZcIjtcbiAgICAgIHRoaXMuY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYmc7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy5XSURUSCwgdGhpcy5IRUlHSFQpO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuZmc7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5uYW1lLCB0aGlzLlRFWFRfWCwgdGhpcy5URVhUX1kpO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KHRoaXMuR1JBUEhfWCwgdGhpcy5HUkFQSF9ZLCB0aGlzLkdSQVBIX1dJRFRILCB0aGlzLkdSQVBIX0hFSUdIVCk7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5iZztcbiAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDAuOTtcbiAgICAgIHRoaXMuY29udGV4dC5maWxsUmVjdCh0aGlzLkdSQVBIX1gsIHRoaXMuR1JBUEhfWSwgdGhpcy5HUkFQSF9XSURUSCwgdGhpcy5HUkFQSF9IRUlHSFQpO1xuICAgIH1cbiAgfVxuICB1cGRhdGUodmFsdWUsIHZhbHVlR3JhcGgsIG1heFZhbHVlLCBtYXhHcmFwaCwgZGVjaW1hbHMgPSAwKSB7XG4gICAgbGV0IG1pbiA9IEluZmluaXR5LCBtYXggPSAwO1xuICAgIGlmICghdGhpcy5jb250ZXh0KVxuICAgICAgcmV0dXJuO1xuICAgIG1pbiA9IE1hdGgubWluKG1pbiwgdmFsdWUpO1xuICAgIG1heCA9IE1hdGgubWF4KG1heFZhbHVlLCB2YWx1ZSk7XG4gICAgbWF4R3JhcGggPSBNYXRoLm1heChtYXhHcmFwaCwgdmFsdWVHcmFwaCk7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYmc7XG4gICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gMTtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy5XSURUSCwgdGhpcy5HUkFQSF9ZKTtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5mZztcbiAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodmFsdWUudG9GaXhlZChkZWNpbWFscykgKyBcIiBcIiArIHRoaXMubmFtZSArIFwiIChcIiArIG1pbi50b0ZpeGVkKGRlY2ltYWxzKSArIFwiLVwiICsgcGFyc2VGbG9hdChtYXgudG9GaXhlZChkZWNpbWFscykpICsgXCIpXCIsIHRoaXMuVEVYVF9YLCB0aGlzLlRFWFRfWSk7XG4gICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmNhbnZhcywgdGhpcy5HUkFQSF9YICsgdGhpcy5QUiwgdGhpcy5HUkFQSF9ZLCB0aGlzLkdSQVBIX1dJRFRIIC0gdGhpcy5QUiwgdGhpcy5HUkFQSF9IRUlHSFQsIHRoaXMuR1JBUEhfWCwgdGhpcy5HUkFQSF9ZLCB0aGlzLkdSQVBIX1dJRFRIIC0gdGhpcy5QUiwgdGhpcy5HUkFQSF9IRUlHSFQpO1xuICAgIHRoaXMuY29udGV4dC5maWxsUmVjdCh0aGlzLkdSQVBIX1ggKyB0aGlzLkdSQVBIX1dJRFRIIC0gdGhpcy5QUiwgdGhpcy5HUkFQSF9ZLCB0aGlzLlBSLCB0aGlzLkdSQVBIX0hFSUdIVCk7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYmc7XG4gICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gMC45O1xuICAgIHRoaXMuY29udGV4dC5maWxsUmVjdCh0aGlzLkdSQVBIX1ggKyB0aGlzLkdSQVBIX1dJRFRIIC0gdGhpcy5QUiwgdGhpcy5HUkFQSF9ZLCB0aGlzLlBSLCAoMSAtIHZhbHVlR3JhcGggLyBtYXhHcmFwaCkgKiB0aGlzLkdSQVBIX0hFSUdIVCk7XG4gIH1cbn1cbjtcbm1vZHVsZS5leHBvcnRzID0gUGFuZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYW5lbC5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/stats-gl/dist/panel.cjs\n");

/***/ })

};
;